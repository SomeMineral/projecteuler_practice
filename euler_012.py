###############################################################################
# 012 Highly divisible triangular number
'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
'''
# triangle number = (1/2) * (n**2 + n)

def prob012(div_num):
    # over : 초과
    if div_num == 1:
        return 3

    def natural_number_check(n):
        if (n < 1) or (n != int(n)):
            return False
        else:
            return True

    def tri_num(n):
        if n == 1:
            return 1
        return int((1/2)* (n**2 + n))
    
    if not natural_number_check(div_num):
        print('only natural number is valid.')
        return
    
    n = 1
    while(True):
        n += 1
        t_num = tri_num(n)
        div_cnt = 2                        # 1과 자기 자신은 기본적으로 담아두자.
        
        for i in range(2,int(t_num**0.5)+1):
            if natural_number_check(t_num / i):
                div_cnt += 2               # 그 외엔 2개씩 추가.

        if natural_number_check(t_num**0.5):
            div_cnt -= 1                   # 정확히 제곱인 경우에는 약수가 쌍이 아니라 단독으로 나오므로 1개
                                           # 근데 위에 경우에서 카운트 되어버리므로 1개 빼주는 걸로.
            
        print('n = {}, triangle number = {}, count = {}'.format(n, t_num, div_cnt))
        if div_cnt > div_num:
            
            return t_num

print(prob012(500)) # 76576500
